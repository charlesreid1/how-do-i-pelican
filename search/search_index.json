{
    "docs": [
        {
            "location": "/",
            "text": "How Do I Pelican?\n\u00b6\n\n\nThis is a simple explanation of how to get started\nusing Pelican to build a static site.\nIt will skip a lot of the details in the \ninterest of simplicity.\n\n\nHTML pages for this tutorial (you are here): \nhttps://pages.charlesreid1.com/how-do-i-pelican/\n\n\nSource code for this tutorial on git.charlesreid1.com: \nhttps://git.charlesreid1.com/charlesreid1/how-do-i-pelican\n\n\nSource code for this tutorial on Github: \nhttps://github.com/charlesreid1/how-do-i-pelican\n\n\nThe outline:\n\n\n\n\nBefore you start - installing Pelican\n\n\nGetting started with Pelican\n\n\nConfiguring your Pelican site\n\n\nTheming your Pelican site\n\n\nGenerating your static site\n\n\nServing your static site\n\n\nAdding content\n\n\nHosting on Github Pages\n\n\n\n\nAlso check out the workflows pages for \ncopy-and-paste commands for working with\nyour pelican site:\n\n\n\n\nWorkflow: Initialization of the Github Pages site\n WorkflowInit.md\n\n\nWorkflow: Update the Github Pages site\n WorkflowUpdate.md",
            "title": "Index"
        },
        {
            "location": "/#how-do-i-pelican",
            "text": "This is a simple explanation of how to get started\nusing Pelican to build a static site.\nIt will skip a lot of the details in the \ninterest of simplicity.  HTML pages for this tutorial (you are here):  https://pages.charlesreid1.com/how-do-i-pelican/  Source code for this tutorial on git.charlesreid1.com:  https://git.charlesreid1.com/charlesreid1/how-do-i-pelican  Source code for this tutorial on Github:  https://github.com/charlesreid1/how-do-i-pelican  The outline:   Before you start - installing Pelican  Getting started with Pelican  Configuring your Pelican site  Theming your Pelican site  Generating your static site  Serving your static site  Adding content  Hosting on Github Pages   Also check out the workflows pages for \ncopy-and-paste commands for working with\nyour pelican site:   Workflow: Initialization of the Github Pages site  WorkflowInit.md  Workflow: Update the Github Pages site  WorkflowUpdate.md",
            "title": "How Do I Pelican?"
        },
        {
            "location": "/Before/",
            "text": "Before You Start\n\u00b6\n\n\nYou'll need to have \nPelican\n installed.\nIf you want to use Markdown with Pelican,\nyou'll also need to install Markdown.\n\n\n$ pip install Markdown \n$ pip install pelican\n\n\n\n\n\nAlso see \ninstallation page\n\nof Pelican documentation.",
            "title": "Before You Start"
        },
        {
            "location": "/Before/#before-you-start",
            "text": "You'll need to have  Pelican  installed.\nIf you want to use Markdown with Pelican,\nyou'll also need to install Markdown.  $ pip install Markdown \n$ pip install pelican  Also see  installation page \nof Pelican documentation.",
            "title": "Before You Start"
        },
        {
            "location": "/Getting/",
            "text": "Getting Started with Pelican\n\u00b6\n\n\nThere are a few things you'll need to get started with \nPelican\n:\n\n\n\n\n(required) \npelicanconf.py\n - pelican configuration file\n\n\n(required) \ncontent/\n - directory containing materials to render into a static site\n\n\n(optional) theme - either a local directory containing a theme, or a system-wide pelican theme\n\n\n\n\nUse the \nmagic-flying-pelican\n \nrepository as a seed repo for getting started with Pelican.\n\n\nBasically, copy the contents of the \npelican/\n directory\nin \nmagic-flying-pelican\n \ninto your own repository, and modify the contents for \nyour own static site.\n\n\nWe'll walk through what the \npelican/\n directory contains and what you \nneed to change to get a simple static site up and running. \n\n\nHow Pelican Works\n\u00b6\n\n\nLet's cover the 101 of how Pelican works.\n\n\nPelican takes a pile of HTML, markdown, and other files,\nand compiles them into a static site. (The advantage of\nusing a static site instead of a dynamic server like\nFlask or a dynamic language like PHP is speed.)\n\n\nTo do that, it reads configuration settings from\n\npelicanconf.py\n, which tell Pelican where to look\nfor the raw files, as well as other settings like \nthe theme to use.\n\n\nThe default location of content is the \ncontent/\n\ndirectory, but more can be added.\n\n\nThe default behavior for Pelican is to serve a blog \nwith a few static pages, but users can define themes\nthat are static pages only (no blog component).\n\n\nThe themes work by providing a set of static files \nand a set of HTML Jinja templates. Pelican uses\nthe static content and the theme to render the \nfinal page.\n\n\nSee \npelican-themes\n\nrepository for themes.\n\n\nSee \nlive gallery\n\nof pelican themes.\n\n\nRepository and Branch Layout\n\u00b6\n\n\nWhen using Pelican to create a static site on Github Pages,\nyou will need to organize your repository and set up \nbranches as follows.\n\n\nRecommended way: project page\n\u00b6\n\n\nIf you are hosting a project Github Pages site\n(that is, a Github Pages page for any arbitrary\nGithub project), you should organize your repo\nas follows:\n\n\n\n\ngh-pages\n branch contains all static content\n\n\nmaster\n branch contains the pelican site\n\n\n\n\nUncommon way: personal page\n\u00b6\n\n\nIf you are hosting a personal Github Pages site\n(a repository under the account \n@yourusername\n\ncalled \nyourusername.github.io\n), this should be \norganized as follows:\n\n\n\n\nmaster\n branch contains all static content\n\n\nsource\n branch contains the \npelican/\n directory\n\n\n\n\nClean way: pelican as a separate branch\n\u00b6\n\n\nIf you have a large project or you really don't want \nto clutter your repository branch with Pelican files,\nyou can also set up a three-branch model as follows:\n\n\n\n\nmaster\n branch contains the source code for your project (no Pelican files)\n\n\nsource\n branch contains the Pelican files for your site\n\n\ngh-pages\n contains all static content for the Github Pages page\n\n\n\n\nDirectory Layout\n\u00b6\n\n\nWhile Pelican is flexible enough to handle many\ndirectory layouts, let's cover a common pattern:\nputting markdown files into \ncontent/\n.\n\n\nmy-cool-project/\n\n    pelican/\n\n        pelicanconf.py\n\n        output/\n            index.html\n            ...\n\n        content/\n            posts/\n                blog-post-1.md\n                blog-post-2.md\n                blog-post-3.md\n            pages/\n                faq.md\n                about.md\n                contact.md\n            img/\n                my-image-1.jpg\n                my-image-2.jpg\n                my-image-3.jpg\n\n\n\n\n\nThe pelican directory contains a configuration\nfile \npelicanconf.py\n, a folder with content\n\ncontent/\n, and an output directory \noutput/\n \nwhere the final static files for the site go.\n(See \nconfiguring\n).\n\n\nThe \noutput/\n directory will not be present \nuntil you generate site content (see \ngenerating\n).\n\n\nThe \noutput/\n directory should be ignored by git.\nIn a later section of this document we will cover\na pattern for linking output to a Github Pages\nsite (see \nworkflow: update\n WorkflowUpdate.md).",
            "title": "Getting Started with Pelican"
        },
        {
            "location": "/Getting/#getting-started-with-pelican",
            "text": "There are a few things you'll need to get started with  Pelican :   (required)  pelicanconf.py  - pelican configuration file  (required)  content/  - directory containing materials to render into a static site  (optional) theme - either a local directory containing a theme, or a system-wide pelican theme   Use the  magic-flying-pelican  \nrepository as a seed repo for getting started with Pelican.  Basically, copy the contents of the  pelican/  directory\nin  magic-flying-pelican  \ninto your own repository, and modify the contents for \nyour own static site.  We'll walk through what the  pelican/  directory contains and what you \nneed to change to get a simple static site up and running.",
            "title": "Getting Started with Pelican"
        },
        {
            "location": "/Getting/#how-pelican-works",
            "text": "Let's cover the 101 of how Pelican works.  Pelican takes a pile of HTML, markdown, and other files,\nand compiles them into a static site. (The advantage of\nusing a static site instead of a dynamic server like\nFlask or a dynamic language like PHP is speed.)  To do that, it reads configuration settings from pelicanconf.py , which tell Pelican where to look\nfor the raw files, as well as other settings like \nthe theme to use.  The default location of content is the  content/ \ndirectory, but more can be added.  The default behavior for Pelican is to serve a blog \nwith a few static pages, but users can define themes\nthat are static pages only (no blog component).  The themes work by providing a set of static files \nand a set of HTML Jinja templates. Pelican uses\nthe static content and the theme to render the \nfinal page.  See  pelican-themes \nrepository for themes.  See  live gallery \nof pelican themes.",
            "title": "How Pelican Works"
        },
        {
            "location": "/Getting/#repository-and-branch-layout",
            "text": "When using Pelican to create a static site on Github Pages,\nyou will need to organize your repository and set up \nbranches as follows.",
            "title": "Repository and Branch Layout"
        },
        {
            "location": "/Getting/#recommended-way-project-page",
            "text": "If you are hosting a project Github Pages site\n(that is, a Github Pages page for any arbitrary\nGithub project), you should organize your repo\nas follows:   gh-pages  branch contains all static content  master  branch contains the pelican site",
            "title": "Recommended way: project page"
        },
        {
            "location": "/Getting/#uncommon-way-personal-page",
            "text": "If you are hosting a personal Github Pages site\n(a repository under the account  @yourusername \ncalled  yourusername.github.io ), this should be \norganized as follows:   master  branch contains all static content  source  branch contains the  pelican/  directory",
            "title": "Uncommon way: personal page"
        },
        {
            "location": "/Getting/#clean-way-pelican-as-a-separate-branch",
            "text": "If you have a large project or you really don't want \nto clutter your repository branch with Pelican files,\nyou can also set up a three-branch model as follows:   master  branch contains the source code for your project (no Pelican files)  source  branch contains the Pelican files for your site  gh-pages  contains all static content for the Github Pages page",
            "title": "Clean way: pelican as a separate branch"
        },
        {
            "location": "/Getting/#directory-layout",
            "text": "While Pelican is flexible enough to handle many\ndirectory layouts, let's cover a common pattern:\nputting markdown files into  content/ .  my-cool-project/\n\n    pelican/\n\n        pelicanconf.py\n\n        output/\n            index.html\n            ...\n\n        content/\n            posts/\n                blog-post-1.md\n                blog-post-2.md\n                blog-post-3.md\n            pages/\n                faq.md\n                about.md\n                contact.md\n            img/\n                my-image-1.jpg\n                my-image-2.jpg\n                my-image-3.jpg  The pelican directory contains a configuration\nfile  pelicanconf.py , a folder with content content/ , and an output directory  output/  \nwhere the final static files for the site go.\n(See  configuring ).  The  output/  directory will not be present \nuntil you generate site content (see  generating ).  The  output/  directory should be ignored by git.\nIn a later section of this document we will cover\na pattern for linking output to a Github Pages\nsite (see  workflow: update  WorkflowUpdate.md).",
            "title": "Directory Layout"
        },
        {
            "location": "/Configuring/",
            "text": "Configuring Your Pelican Site\n\u00b6\n\n\nThe \npelicanconf.py\n file contains all configuration variables\nthat \nPelican\n sites need to set.\n\n\nSome of the configuration variables are common to all Pelican sites,\nothers are particular to the theme you are using.\n\n\nHere's an example configuration file from \n\nmagic-flying-pelican\n:\n\n\npelicanconf.py\n:\n\n\nAUTHOR\n \n=\n \n'charlesreid1'\n\n\nSITENAME\n \n=\n \n'how-do-i-pelican'\n\n\nSITEURL\n \n=\n \n''\n\n\nPATH\n \n=\n \n'content'\n\n\nTIMEZONE\n \n=\n \n'America/Los_Angeles'\n\n\nDEFAULT_LANG\n \n=\n \n'en'\n\n\n\n# --------------8<---------------------\n\n\n# Theme\n\n\n\nTHEME\n \n=\n \n'simple-bootstrap'\n\n\n# https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap\n\n\n\n\n# --------------8<---------------------\n\n\n# Files and content\n\n\n\n\n# This will look for a directory img/ \n\n\n# inside the directory content/\n\n\n# The contents of img/ will be available at \n\n\n# {{ SITEURL }}/img\n\n\nSTATIC_PATHS\n \n=\n \n[\n'img'\n]\n\n\n\n# If we want to create static pages,\n\n\n# we should put them in content/pages\n\n\nPAGE_PATHS\n \n=\n \n[\n'pages'\n]\n\n\n\n# If we want to create blog posts (articles),\n\n\n# we should put them in content/posts\n\n\nARTICLE_PATHS\n \n=\n \n[\n'posts'\n]\n\n\n\n\n# --------------8<---------------------\n\n\n# idk just some dumb stuff\n\n\n\nDISPLAY_PAGES_ON_MENU\n \n=\n \nFalse\n\n\nFEED_ALL_ATOM\n \n=\n \nNone\n\n\nCATEGORY_FEED_ATOM\n \n=\n \nNone\n\n\nTRANSLATION_FEED_ATOM\n \n=\n \nNone\n\n\nAUTHOR_FEED_ATOM\n \n=\n \nNone\n\n\nAUTHOR_FEED_RSS\n \n=\n \nNone\n\n\nDEFAULT_PAGINATION\n \n=\n \nFalse\n\n\n\n\n\n\nThis will configure the \ncontent/\n directory\nto contain a \nposts/\n folder with blog posts\nand a \npages/\n folder with static pages.\n\n\nThere's a lot more that can be done with the \nconfiguration file, but much of it requires\ncustom themes, so we'll leave it at that.\n\n\nSee the \nsettings page\n\nof the pelican documentation for details.",
            "title": "Configuring Your Pelican Site"
        },
        {
            "location": "/Configuring/#configuring-your-pelican-site",
            "text": "The  pelicanconf.py  file contains all configuration variables\nthat  Pelican  sites need to set.  Some of the configuration variables are common to all Pelican sites,\nothers are particular to the theme you are using.  Here's an example configuration file from  magic-flying-pelican :  pelicanconf.py :  AUTHOR   =   'charlesreid1'  SITENAME   =   'how-do-i-pelican'  SITEURL   =   ''  PATH   =   'content'  TIMEZONE   =   'America/Los_Angeles'  DEFAULT_LANG   =   'en'  # --------------8<---------------------  # Theme  THEME   =   'simple-bootstrap'  # https://github.com/getpelican/pelican-themes/tree/master/simple-bootstrap  # --------------8<---------------------  # Files and content  # This will look for a directory img/   # inside the directory content/  # The contents of img/ will be available at   # {{ SITEURL }}/img  STATIC_PATHS   =   [ 'img' ]  # If we want to create static pages,  # we should put them in content/pages  PAGE_PATHS   =   [ 'pages' ]  # If we want to create blog posts (articles),  # we should put them in content/posts  ARTICLE_PATHS   =   [ 'posts' ]  # --------------8<---------------------  # idk just some dumb stuff  DISPLAY_PAGES_ON_MENU   =   False  FEED_ALL_ATOM   =   None  CATEGORY_FEED_ATOM   =   None  TRANSLATION_FEED_ATOM   =   None  AUTHOR_FEED_ATOM   =   None  AUTHOR_FEED_RSS   =   None  DEFAULT_PAGINATION   =   False   This will configure the  content/  directory\nto contain a  posts/  folder with blog posts\nand a  pages/  folder with static pages.  There's a lot more that can be done with the \nconfiguration file, but much of it requires\ncustom themes, so we'll leave it at that.  See the  settings page \nof the pelican documentation for details.",
            "title": "Configuring Your Pelican Site"
        },
        {
            "location": "/Theming/",
            "text": "Theming your Pelican site\n\u00b6\n\n\nCustom themes are where Pelican becomes really powerful.\n\n\nFor this tutorial, though, we'll stick to the basics.\n\n\nSee \npelican-themes\n\non Github for a full list of themes.\n\n\nSee \npelicanthemes.com\n\nfor a gallery of themes.\n\n\nsimple-bootstrap theme\n\u00b6\n\n\nFor this example, we'll use the \nsimple-bootstrap\n,\na simple Bootstrap theme.\n\n\nTo use the simple-bootstrap theme, we have to install it.\nStart by checking out the pelican-themes repo:\n\n\n$ git clone --recursive https://github.com/getpelican/pelican-themes \n\n$ cd pelican-themes\n\n$ pelican-themes -i simple-bootstrap\n\n\n\n\n\nIf you modify or update the theme, you can \nuse the \n-U\n flag (for Update) with \npelican-themes\n:\n\n\n$ pelican-themes -U simple-bootstrap\n\n\n\n\n\nNow you can set the gum theme in your \npelicanconf.py\n\nby setting the \nTHEME\n variable:\n\n\nTHEME=\"simple-bootstrap\"",
            "title": "Theming Your Pelican Site"
        },
        {
            "location": "/Theming/#theming-your-pelican-site",
            "text": "Custom themes are where Pelican becomes really powerful.  For this tutorial, though, we'll stick to the basics.  See  pelican-themes \non Github for a full list of themes.  See  pelicanthemes.com \nfor a gallery of themes.",
            "title": "Theming your Pelican site"
        },
        {
            "location": "/Theming/#simple-bootstrap-theme",
            "text": "For this example, we'll use the  simple-bootstrap ,\na simple Bootstrap theme.  To use the simple-bootstrap theme, we have to install it.\nStart by checking out the pelican-themes repo:  $ git clone --recursive https://github.com/getpelican/pelican-themes \n\n$ cd pelican-themes\n\n$ pelican-themes -i simple-bootstrap  If you modify or update the theme, you can \nuse the  -U  flag (for Update) with  pelican-themes :  $ pelican-themes -U simple-bootstrap  Now you can set the gum theme in your  pelicanconf.py \nby setting the  THEME  variable:  THEME=\"simple-bootstrap\"",
            "title": "simple-bootstrap theme"
        },
        {
            "location": "/Generating/",
            "text": "Generating your static site\n\u00b6\n\n\nTo generate your static site with \nPelican\n,\nuse the \npelican content\n command, run from\nthe \npelican/\n directory (see \ngetting started\n\nfor a guide to the pelican directory layout):\n\n\n$ pelican\n\n\n\n\n\nThis will generate the static site content into\nthe \noutput/\n folder.\n\n\nInputs: \ncontent/\n\n\nOutput: \noutput/\n\n\nTo modify the input folder, change the \nPATH\n variable\nin \npelicanconf.py\n:\n\n\nPATH = 'my_custom_content_dir'\n\n\n\n\n\nTo modify the output directory, set the \n\nOUTPUT_PATH\n variable in \npelicanconf.py\n:\n\n\nOUTPUT_PATH = 'my_custom_output_dir'\n\n\n\n\n\nSee the \nsettings page\n\nof the pelican documentation for more variables\nthat can be set in the \npelicanconf.py\n file.",
            "title": "Generating Your Pelican Site"
        },
        {
            "location": "/Generating/#generating-your-static-site",
            "text": "To generate your static site with  Pelican ,\nuse the  pelican content  command, run from\nthe  pelican/  directory (see  getting started \nfor a guide to the pelican directory layout):  $ pelican  This will generate the static site content into\nthe  output/  folder.  Inputs:  content/  Output:  output/  To modify the input folder, change the  PATH  variable\nin  pelicanconf.py :  PATH = 'my_custom_content_dir'  To modify the output directory, set the  OUTPUT_PATH  variable in  pelicanconf.py :  OUTPUT_PATH = 'my_custom_output_dir'  See the  settings page \nof the pelican documentation for more variables\nthat can be set in the  pelicanconf.py  file.",
            "title": "Generating your static site"
        },
        {
            "location": "/Serving/",
            "text": "Serving your static site\n\u00b6\n\n\nOnce you've run the \npelican\n command to generate\nyour static site, you'll want to see what it looks like.\nTo do this, you need to run a simple HTTP server - \nnothing fancy. \n\n\n(Now you can see the advantage of a static site.)\n\n\nRun a simple HTTP server with python, which has a \nbuilt-in HTTP server that can be run from the \ncommand line.\n\n\nRun the server from the \noutput/\n directory,\nwhich contains the static content for your site.\n\n\n$ cd pelican/output/\n\n$ python -m http.server    # serve content on localhost:8000\n\n$ python -m http.server 8888  # serve content on localhost:8888\n\n\n\n\n\nNow navigate to \nlocalhost:8000\n or \nlocalhost:8888\n \nin your browser to view your static site.",
            "title": "Serving Your Static Site"
        },
        {
            "location": "/Serving/#serving-your-static-site",
            "text": "Once you've run the  pelican  command to generate\nyour static site, you'll want to see what it looks like.\nTo do this, you need to run a simple HTTP server - \nnothing fancy.   (Now you can see the advantage of a static site.)  Run a simple HTTP server with python, which has a \nbuilt-in HTTP server that can be run from the \ncommand line.  Run the server from the  output/  directory,\nwhich contains the static content for your site.  $ cd pelican/output/\n\n$ python -m http.server    # serve content on localhost:8000\n\n$ python -m http.server 8888  # serve content on localhost:8888  Now navigate to  localhost:8000  or  localhost:8888  \nin your browser to view your static site.",
            "title": "Serving your static site"
        },
        {
            "location": "/Adding/",
            "text": "Adding content to your site\n\u00b6\n\n\nNow that you have generated your site with the \n\npelican\n command, and have used Python to serve\nyour documentation with a simple HTTP server,\nyou have all the tools you need to start creating\ncontent for your website.\n\n\nAlso see \nwriting content\n\npage of pelican documentation.\n\n\nPelican has two types of content: pages (unchanging, no chronology) \nand articles (blog posts). We will cover each below.\n\n\nAdding blog posts to your site\n\u00b6\n\n\nLet's cover how you add new content to your site.\n\n\nBy default, Pelican is set up to create blog sites,\nso we'll cover how to create a blog. Creating static\nsites requires custom themes, and we won't get into that\nin this document.\n\n\nIn the \ncontent/\n directory (or \ncontent/posts/\n directory), \nyou create blog posts by adding Markdown files, and specify\nmetadata using a YAML header.\n\n\nHere's a Markdown template for a blog post:\n\n\nTitle: My super title\nDate: 2010-12-03 10:20\nModified: 2010-12-05 19:30\nCategory: Python\nTags: pelican, publishing\nSlug: my-super-post\nAuthors: Alexis Metaireau, Conan Doyle\nSummary: Short version for index and feeds\n\nThis is the content of my super blog post.\n\n\n\n\n\nNote that not everything is necessary (e.g., Slug, Authors, Summary).\nUltimately the variables in the YAML headers of each\nblog post are passed to the theme's page templates,\nso what information gets used depends on the theme \nthat you use.\n\n\nAdding pages to your site\n\u00b6\n\n\nMetadata for \n\n\nLinking to other pages\n\u00b6\n\n\nAs shown in the \nlinking to internal content\n\nsection of the pelican docs, you can link to other files\n\n\narticle1.md\n:\n\n\nTitle: The first article\nDate: 2012-12-01 10:02\n\nSee below intra-site link examples in Markdown format.\n\n[a link to another file]({filename}/article2.md)\n\n\n\n\n\narticle2.md\n:\n\n\nTitle: The second article\nDate: 2012-12-01 10:02\n\nMore markdown goes _here_.\n\n[link back to article one]({filename}/article1.md)\n\n\n\n\n\nSee \ndocs\n for details.\n\n\nLinking to static files\n\u00b6\n\n\nFor example, a project\u2019s content directory might be structured like this:\n\n\nSuppose you have a directory structure like this:\n\n\ncontent\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 han.jpg\n\u251c\u2500\u2500 pdfs\n\u2502   \u2514\u2500\u2500 menu.pdf\n\u2514\u2500\u2500 pages\n    \u2514\u2500\u2500 test.md\n\n\n\n\n\nthen in \ntest.md\n you would link to other files like this:\n\n\n![Alt Text]({filename}/images/han.jpg)\n[Our Menu]({filename}/pdfs/menu.pdf)\n\n\n\n\n\nSee \ndocs\n\nfor details...",
            "title": "Adding Content"
        },
        {
            "location": "/Adding/#adding-content-to-your-site",
            "text": "Now that you have generated your site with the  pelican  command, and have used Python to serve\nyour documentation with a simple HTTP server,\nyou have all the tools you need to start creating\ncontent for your website.  Also see  writing content \npage of pelican documentation.  Pelican has two types of content: pages (unchanging, no chronology) \nand articles (blog posts). We will cover each below.",
            "title": "Adding content to your site"
        },
        {
            "location": "/Adding/#adding-blog-posts-to-your-site",
            "text": "Let's cover how you add new content to your site.  By default, Pelican is set up to create blog sites,\nso we'll cover how to create a blog. Creating static\nsites requires custom themes, and we won't get into that\nin this document.  In the  content/  directory (or  content/posts/  directory), \nyou create blog posts by adding Markdown files, and specify\nmetadata using a YAML header.  Here's a Markdown template for a blog post:  Title: My super title\nDate: 2010-12-03 10:20\nModified: 2010-12-05 19:30\nCategory: Python\nTags: pelican, publishing\nSlug: my-super-post\nAuthors: Alexis Metaireau, Conan Doyle\nSummary: Short version for index and feeds\n\nThis is the content of my super blog post.  Note that not everything is necessary (e.g., Slug, Authors, Summary).\nUltimately the variables in the YAML headers of each\nblog post are passed to the theme's page templates,\nso what information gets used depends on the theme \nthat you use.",
            "title": "Adding blog posts to your site"
        },
        {
            "location": "/Adding/#adding-pages-to-your-site",
            "text": "Metadata for",
            "title": "Adding pages to your site"
        },
        {
            "location": "/Adding/#linking-to-other-pages",
            "text": "As shown in the  linking to internal content \nsection of the pelican docs, you can link to other files  article1.md :  Title: The first article\nDate: 2012-12-01 10:02\n\nSee below intra-site link examples in Markdown format.\n\n[a link to another file]({filename}/article2.md)  article2.md :  Title: The second article\nDate: 2012-12-01 10:02\n\nMore markdown goes _here_.\n\n[link back to article one]({filename}/article1.md)  See  docs  for details.",
            "title": "Linking to other pages"
        },
        {
            "location": "/Adding/#linking-to-static-files",
            "text": "For example, a project\u2019s content directory might be structured like this:  Suppose you have a directory structure like this:  content\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 han.jpg\n\u251c\u2500\u2500 pdfs\n\u2502   \u2514\u2500\u2500 menu.pdf\n\u2514\u2500\u2500 pages\n    \u2514\u2500\u2500 test.md  then in  test.md  you would link to other files like this:  ![Alt Text]({filename}/images/han.jpg)\n[Our Menu]({filename}/pdfs/menu.pdf)  See  docs \nfor details...",
            "title": "Linking to static files"
        },
        {
            "location": "/Hosting/",
            "text": "Hosting on Github Pages\n\u00b6\n\n\nNow that you've configured your \nPelican\n site,\ncreated your content, viewed it, modified it,\nand are happy with it, you're ready to deploy\nyour site somewhere viewable by the public.\n\n\nEnter Github Pages.\n\n\nGithub provides free web hosting for static content\nfor \nevery single repository on Github\n.\nThat means you can deploy your static site\nto Github Pages for no-hassle serverless\nweb hosting.\n\n\n(Also see the \npublish\n\npage of the pelican documentation.)\n\n\nDifferences between personal and project pages\n\u00b6\n\n\nIn this walkthrough we assume the most common scenario\nof deploying a page on Github Pages for a project.\n\n\nSetting up a personal page requires changing \nbranch names - see \ngetting started\n\nand the section on branches in particular.\nChange \ngh-pages\n to \nmaster\n and \nmaster\n to \nsource\n.\n\n\nThe rest of the document will assume you are creating\na project page.\n\n\nWhere is it?\n\u00b6\n\n\nWhere do Github Pages live?\n\n\nIf your username is \nusername\n and your project name is \nprojectname\n,\nthe Github source code is at:\n\n\nhttps://github.com/username/projectname\n\n\n\n\n\nand the Github Pages page will be at:\n\n\nhttps://username.github.io/projectname\n\n\n\n\n\nInitializing gh-pages branch\n\u00b6\n\n\nBefore you begin, you have to create a \ngh-pages\n branch.\nWe want to create a new branch that is \ncompletely independent\n\nof all other branches, because this branch will only contain\nthe static content of our website - no code, no readmes, \nnothing but HTML, CSS, and Javascript.\n\n\nWe want to link the \ngh-pages\n branch, which will contain\nthe site's static content, with the \noutput/\n directory,\nwhere Pelican generates all of its static content.\n\n\nRemove the output directory, and clone a copy of \nyour repo to the output directory:\n\n\n$ cd pelican/\n$ rm -rf output/\n$ git clone https://github.com/username/projectname.git output\n$ cd output/\n\n\n\n\n\nNow create a new orphan branch - that's the git terminology\nfor a branch that shares no history with any other branches.\nCall it \ngh-pages\n:\n\n\n$ git checkout --orphan gh-pages\n\n\n\n\n\nNow all the content that was in the master branch\nwill show up as untracked files, because the new\n\ngh-pages\n branch is totally empty.\n\n\nRemove everything in the directory except\nthe \n.git\n directory:\n\n\n$ rm -rf *\n$ rm -rf .gitignore .gitmodules\n\n\n\n\n\nNow add a simple \"Hello world\" page that we'll use \nto make sure our Github Pages page is being \nhosted correctly:\n\n\n$ echo '<h2>Hello world!</h2>' > index.html\n$ git add index.html\n$ git commit index.html -m 'Initial commit of gh-pages branch'\n$ git push origin gh-pages\n\n\n\n\n\nNow we have our intiial commit on the \n\ngh-pages\n branch.\n\n\nEnabling Github Pages\n\u00b6\n\n\nWe have one additional step to cover.\nAfter we create the \ngh-pages\n branch,\nwe want to tell Github Pages that we have\nweb content on that branch that we want \nGithub to host. \n\n\nGo to the repository settings,\nand scroll down to the Github Pages\nsetting. Select the drop-down option\nto host your Github Pages content\nfrom the \ngh-pages\n branch.\n\n\nNow visit the URL to check out your\nHello World page:\n\n\nhttps://username.github.io/projectname\n\n\n\n\n\nAdding the real content\n\u00b6\n\n\nWe have a hello world page working,\nnow let's add the real Pelican content.\n\n\nBack in the \npelican/\n directory,\nclean out the \noutput/\n directory\n(we'll be making everything from \nscratch):\n\n\n$ rm -rf output/*\n\n\n\n\n\nDon't remove the \noutput/\n directory itself though!\n\n\nNow make the content:\n\n\n$ pelican content\n\n\n\n\n\nNow add the content to the \ngh-pages\n branch \nand push it to Github to deploy it:\n\n\n$ cd output/\n$ git add -A .\n$ git commit -a -m 'Updating site'\n$ git push origin gh-pages\n\n\n\n\n\nThis will push the new static site (this time with \nthe Pelican output) to the \ngh-pages\n branch on Github.\nSometimes the site updates really fast (few seconds),\nsometimes it takes longer, but never more than about a minute.\n\n\nDon't forget to add a link to your new page\nin the repository description (and in your README)\nto make it easier to find!",
            "title": "Hosting on Github Pages"
        },
        {
            "location": "/Hosting/#hosting-on-github-pages",
            "text": "Now that you've configured your  Pelican  site,\ncreated your content, viewed it, modified it,\nand are happy with it, you're ready to deploy\nyour site somewhere viewable by the public.  Enter Github Pages.  Github provides free web hosting for static content\nfor  every single repository on Github .\nThat means you can deploy your static site\nto Github Pages for no-hassle serverless\nweb hosting.  (Also see the  publish \npage of the pelican documentation.)",
            "title": "Hosting on Github Pages"
        },
        {
            "location": "/Hosting/#differences-between-personal-and-project-pages",
            "text": "In this walkthrough we assume the most common scenario\nof deploying a page on Github Pages for a project.  Setting up a personal page requires changing \nbranch names - see  getting started \nand the section on branches in particular.\nChange  gh-pages  to  master  and  master  to  source .  The rest of the document will assume you are creating\na project page.",
            "title": "Differences between personal and project pages"
        },
        {
            "location": "/Hosting/#where-is-it",
            "text": "Where do Github Pages live?  If your username is  username  and your project name is  projectname ,\nthe Github source code is at:  https://github.com/username/projectname  and the Github Pages page will be at:  https://username.github.io/projectname",
            "title": "Where is it?"
        },
        {
            "location": "/Hosting/#initializing-gh-pages-branch",
            "text": "Before you begin, you have to create a  gh-pages  branch.\nWe want to create a new branch that is  completely independent \nof all other branches, because this branch will only contain\nthe static content of our website - no code, no readmes, \nnothing but HTML, CSS, and Javascript.  We want to link the  gh-pages  branch, which will contain\nthe site's static content, with the  output/  directory,\nwhere Pelican generates all of its static content.  Remove the output directory, and clone a copy of \nyour repo to the output directory:  $ cd pelican/\n$ rm -rf output/\n$ git clone https://github.com/username/projectname.git output\n$ cd output/  Now create a new orphan branch - that's the git terminology\nfor a branch that shares no history with any other branches.\nCall it  gh-pages :  $ git checkout --orphan gh-pages  Now all the content that was in the master branch\nwill show up as untracked files, because the new gh-pages  branch is totally empty.  Remove everything in the directory except\nthe  .git  directory:  $ rm -rf *\n$ rm -rf .gitignore .gitmodules  Now add a simple \"Hello world\" page that we'll use \nto make sure our Github Pages page is being \nhosted correctly:  $ echo '<h2>Hello world!</h2>' > index.html\n$ git add index.html\n$ git commit index.html -m 'Initial commit of gh-pages branch'\n$ git push origin gh-pages  Now we have our intiial commit on the  gh-pages  branch.",
            "title": "Initializing gh-pages branch"
        },
        {
            "location": "/Hosting/#enabling-github-pages",
            "text": "We have one additional step to cover.\nAfter we create the  gh-pages  branch,\nwe want to tell Github Pages that we have\nweb content on that branch that we want \nGithub to host.   Go to the repository settings,\nand scroll down to the Github Pages\nsetting. Select the drop-down option\nto host your Github Pages content\nfrom the  gh-pages  branch.  Now visit the URL to check out your\nHello World page:  https://username.github.io/projectname",
            "title": "Enabling Github Pages"
        },
        {
            "location": "/Hosting/#adding-the-real-content",
            "text": "We have a hello world page working,\nnow let's add the real Pelican content.  Back in the  pelican/  directory,\nclean out the  output/  directory\n(we'll be making everything from \nscratch):  $ rm -rf output/*  Don't remove the  output/  directory itself though!  Now make the content:  $ pelican content  Now add the content to the  gh-pages  branch \nand push it to Github to deploy it:  $ cd output/\n$ git add -A .\n$ git commit -a -m 'Updating site'\n$ git push origin gh-pages  This will push the new static site (this time with \nthe Pelican output) to the  gh-pages  branch on Github.\nSometimes the site updates really fast (few seconds),\nsometimes it takes longer, but never more than about a minute.  Don't forget to add a link to your new page\nin the repository description (and in your README)\nto make it easier to find!",
            "title": "Adding the real content"
        }
    ]
}